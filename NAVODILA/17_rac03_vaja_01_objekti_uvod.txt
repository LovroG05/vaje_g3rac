LAV/Rac03                      Vaja 17
                        (draft, 6. mar. 2023)

Teme:
 : razred, objekt
 : predstavitev razredov, objektov
 : deklaracija, rezervacija, inicializacija: primitivni in referenčni tipi
 : ovojnice primitivov: auto inboxing, outboxing
 : raba obstoječih / znanih objektov


V osnovi ločimo 2 vrste podatkov/podatkovnih tipov:
-primitivni, 
-referenčni.

Primitivne poznamo :
  int, char, double, float,...
  
nekaj referenčnih pa smo uporabljali, ne da bi kaj več povedali o njih:  
  String[] args   (public static void(Strign[] args
  Integer (Integer.valueOf(args[0]) , Integer.parseInt( ...
  java.util.Scanner sc
  java.util.Random rd
 več govora je bilo zgolj o tabelah, ki so pa posebna vrsta objekta
 
!-------------------------------------------------------------------------------------------- 
! Poročilo o izvedeni vaji oddajte do konca ure vaj predmeta račV (3.ure v bloku na dan izvedbe) 
!    - vajo oddate tako inštruktorju na vajah kot v nabiralnik učitelju predmeta RAČ!
!    - oddaja se evalvira po vseh pravilih za oddajo vaj z moderacijo možnega največjega dosežka glede termina oddaje
!     (isti dan -20%, 1(naslednji),2 -dodatnih 20%, 3,4 -dodatnih 20%, potem največ do 30% osnove) 
!---
 
 
 
Naloga 1 
Deklaracija spremenljivke objektnega tipa (z deklaracijo opredelite, s čim boste naslavljali objekt,
    pri referenčnih tipih predstavlja referenco oz. pomnilniški naslov objekta, ... ( po domače: pove vam, 
	kje v pomnilniku je objekt)
	
  Spišite razred Naloga1. Definirajte naslednje tri kot javne razredne lastnosti:
    java.util.Scanner rsc;
    java.util.Random rrd;
	int[] rti;
	
  a) V BlueJ z desnim miškinim gumbom kliknite na sliko razreda Naloga1 in izberite "Inspect" (preglej). Ugotovite in
     zapišite kakšne vrednosti imajo spremeljivke rsc, rrd, rti.
  b) V 'driver' metodi razreda izpišite vrednosti vseh treh razrednih lastnosti.
  c) V 'driver' metodi razreda Naloga1 definirajte duplikate razrednih definicij z imeni rsc_d, rrd_d, in rti_d.
     Skušajte prevesti program. Kaj opazite ?
  d) Popraviti lokalne deklaracije (znotraj zagonske metode) z inicilizacijo. Uporabite vrednosti, ki ste jih
     zaznali pri pregledu razrednih spremeljivk v delu a).

Naloga 2	 
   V c) delu smo zaznali, da 'prevajalnik' včasih ni zadovoljen, če deklaracija ni inicializirana (deklaracija v
   izvedbeni kodi oz. v metodi). V takem primeru je potrebno izvesti inicilizacijo ( primitivni tipi: vrednost,
   referenčni tipi: null) ali pa rezervacijo prostora (za objekt)   
  
   Spišite razred Naloga2, ki vsebuje enake tri javne razredne lastnosti, kot je bilo to opredeljeno v Naloga1.
   Driver metoda tega razreda pa naj vsebuje:
      deklaracijo celoštevilske spremeljivke cst, inicilizirane z vrednostjo 100
	  vrstico:  rsc = new java.util.Scanner("10 20 30 40 50 90");
	  vrstico:  rti = new int[10];
   
   a) izvedite "Inspect" na razredu Naloga2. Kaj opazite ?
   b) v vseh treh primerih izvedenih v glavni metodi, smo dejansko naredili 'objekte' : primitiv z deklaracijo,
      pri obeh referenčnih tipih pa tako, da smo uporabili operator 'new' za rezervacijo prostora za objekt. V
	  zadnjih dveh primerih, sta se narejena objekta samodejno inicilizirala z vrednostjo '0' (glej vrednosti
	  elementov tabele, pobrskaj po primerku Scannerja)
   c) Ali imamo v našem programu kakšen objekt tipa Random ? Če da, ga identificirajte.
   
Naloga 3
   Inicializacija je postopek, s katerim objektu določite (priredite) neke (začetne?) vrednosti. V kodi objekt
   mora biti incializiran (sicer po OOP izhodiščih objekta ni mogoče identificirati; lastnosti opredeljujejo objekt), 
   zato pri kreiranju objekta prevajalnik vse objekte (primerke referenčnih tipov) samodejno inicializira z 0 
   oz. analogijo ničle (tabelo int npr. s samimi ničlami, tabelo char z znaki, ki imajo v ascii tabeli pozicijo 0, ..).
   Nekateri objekti pa so taki, da jih enostavno ne morete narediti brez tega, da pri njihovem kreiranju že
   zagotovite določene podatke; pri Scannerju je pač potrebno povedati, od kje dobiva podatke.
   
   a) Program in Naloga2 prepišite v Naloga3.
   b) inicializirajte tabelo rti  z zaporedjem 1200,1300,1400, ...
   c) preverite inicializacije :
        c1) izpišite vse elemente tabele
		c2) preberite celoten tok podatkov iz rsc : while ( rsc.hasNext() ) System.out.println(rsc.nextInt());
   d) naredite še objekt rrd, nato izpišite 10 generiranih števil : 
               for (int i=0;i<10;i++) System.out.println(rrd.nextInt());

Naloga 4
   Izrišite (slika) razredni in objektni diagram za primer izgotovljene Naloga3. Diagram lahko izrišete ročno, 
   kot je bilo to podano v besedilu predhodne vaje, ali pa si pomagate z orodji (MS Visio, Visual Paradigm, razširitev
   UMLExtension-BlueJ5 v Bluej/v šoli je nameščena: desni gumb na razredu+display uml, online z yuml.me,... )
   Primer obeh diagramov v yuml sintaksi:
   [pero:Oseba|+forname=Pero;+surname=Novak;-emso=1234567500100;zadetki=(12,13,14)|diha();je();]
   [Oseba|+forname:String;+surname:String;-emso:Numeric;zadetki=1..3|diha();je();]

   /* en primer opredelitve vrednosti el. tabele je podan, lahko podate samo prvih par, ali pa sploh ne. če to ni
      edina lastnost v objektu */

Naloga 5
   a) Spišite razred Naloga5a z zagonsko metodo vsebine:
   
   int[] ti = new ti[10];
   for(int i=0;i<10;i++) System.out.println( ti[i] );
   for(int i=0;i<10;t[i]=i*10,i++); 
   for(int i=0;i<10;i++) System.out.println( ti[i] );
   
   ugotovite, kaj program izpiše.
   
   b) Spišite razred Naloga5b, ki bo vsebinsko enak razredu Naloga5a. Spremenimo deklaracijo tabele ti, da
      elementi ne bodo več primitivi, temveč ekvivalentni referenčni tipi vrste Integer:
	  
	  int[] ti = new Integer[10];
	  
	  se program izvede kljub narejenim spremembam ?
	  
  /* Integer je objektna ovojnica primitiva, med obeha tipoma je pretvorba avtomatična: int <-> Integer.
	  Pretvorbi v objekt pravimo inbox-ing, iz objekta v primitiv: out-boxing.  Izraza: 'Ovijanje','Odvijanje'. 
	  inboxing je viden : t[i] = i;  (na levi strani enačaja je Integer, na desni int)
	  V stavku : System.out.println( ti[i] );   pa je vidna še ena značilnost : tudi Integer je možno
	  pretvoriti v niz in ga izpisati; metodo za pretvarjanje v niz v objekt doda prevajalnik samodejno
  */
   
Naloga 6
   V nalogi 5 smo videli, da imamo lahko več objektov istega (referenčnega) tipa, shranili smo jih v tabeli
   (10 njih). Namesti Integer imamo v tabeli lahko tudi objekte tipa String. Nič neobičajnega, smo že uporabljali:
   
   // zaženimo z : java TestArgs 12 trinajst 4rinajst 15
   public class TestArgs{
       public static void main(String[] args){
	      for (int i=0;i<args.length;i++)
		     System.out.println(args[i]);
	   }
   }  
   
   Kaj program izpiše ? Kaj so dejansko elementi tabele?
   
Naloga 7
  Tabelo nizov lahko (namesto, da jo naredi in inicializira javanska platforma, kot v predhodnem primeru)
  na enak način naredimo tudi sami:
  
  String[] ts = new String[5];                        // deklaracija tabele; ustvari 5 referenc na nize (ki jih še ni)
           ts[0] = new String("1 2 3 4 5");           // ustvarimo prvi niz
		   ts[1] = "11 12 13 14 15 16";               // drugi niz, poenostavljeno pa enakovredno
		   ts[3] = new String("21 22 23 24 25 26 27");
  na enak način ustvarite in inicializirajte še oba manjkajoča. 
  Spišite program, ki bo na zaslon izpisal v glavni metodi lokalno ustvarjeno strukturo, kot je podana zgoraj in
  njeno vsebino izpisal na zaslon.

Naloga 8
  Zaporedja v ts naloge Naloga7 privzamemo kot vire za enako število objektov tipa Scanner 
  (glej nalogi Naloga1 in Naloga2) tako, da je vsak niz tabele ts vir za natanko en objekt tipa Scanner.
  
  Spišite program, ki bo na zaslon izpisoval po eno številko iz vsakega objekta tipa scanner, dokler ne 
  izpraznemo vseh virov. Pričakovan izpis po vrstah je:
  1 11 21 31 41
  2 12 22 32 42
  3 13 23 .....
  ...
  49
   